package com.jzdata.aimedical.secret.config;import com.google.common.collect.Maps;import com.jzdata.aimedical.secret.consts.DefaultFilterType;import com.jzdata.aimedical.secret.filters.AjaxPermissionsAuthorizationFilter;import com.jzdata.aimedical.secret.filters.ShiroPermsFilter;import com.jzdata.aimedical.secret.filters.ShiroRolesFilter;import lombok.Data;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.InitializingBean;import org.springframework.boot.context.properties.ConfigurationProperties;import org.springframework.stereotype.Component;import org.springframework.util.ObjectUtils;import javax.servlet.Filter;import java.util.ArrayList;import java.util.Collections;import java.util.List;import java.util.Map;/** * shiro配置类 * * @author caoqiang * @date 2020/1/14 0014上午 11:54 */@Slf4j@Data@Component@ConfigurationProperties(prefix = "security.shiro")public class ShiroProperties implements InitializingBean {  /**   * 是否开启shiro功能   */  private Boolean enabled = true;  /**   * 是否开启shiro注解支持   */  private Boolean annotationEnabled;  /**   * 动态权限配置   */  private List<Map<String, String>> perms = new ArrayList<>();  /**   * Shiro请求拦截规则配置(shiro的拦截器规则，常用的anon和authc)   */  private Map<DefaultFilterType, List<String>> filterPattern = Maps.newLinkedHashMap();  /**   * 自定义Filter   */  private ShiroFilter shiroFilter;  /**   * 自定义Session   */  private ShiroSession session;  @Data  public static class ShiroSession {    /**     * Shiro Session 过期时间（分钟）     */    private Long globalSessionTimeout = 30L;    /**     * 是否删除过期Session     */    private Boolean deleteInvalidSessions = true;    /**     * 是否定时检查Session     */    private Boolean sessionValidationSchedulerEnabled = true;    /**     * session是否可以被保存到cookie中     */    private Boolean sessionIdCookieEnabled = false;    /**     * 是否去掉URL中的JSESSIONID     */    private Boolean sessionIdUrlRewritingEnabled = false;  }  /**   * 自定义ShiroFilter配置   */  @Data  public static class ShiroFilter {    private Map<DefaultFilterType, Class<? extends Filter>> filters = Maps.newLinkedHashMap();  }  @Override  public void afterPropertiesSet() {    if (ObjectUtils.isEmpty(shiroFilter)) {      shiroFilter = new ShiroFilter();      shiroFilter.filters.put(DefaultFilterType.authc, AjaxPermissionsAuthorizationFilter.class);      shiroFilter.filters.put(DefaultFilterType.perms, ShiroPermsFilter.class);      shiroFilter.filters.put(DefaultFilterType.roles, ShiroRolesFilter.class);    }    if (!filterPattern.containsKey(DefaultFilterType.authc)) {      filterPattern.put(DefaultFilterType.authc, Collections.singletonList("/**"));    }    List<String> filterPatterns = filterPattern.get(DefaultFilterType.anon);    if (ObjectUtils.isEmpty(filterPatterns)) {      filterPatterns = new ArrayList<>();    }    filterPattern.put(DefaultFilterType.anon, filterPatterns);  }}