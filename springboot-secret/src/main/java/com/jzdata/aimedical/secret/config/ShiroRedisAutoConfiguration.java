package com.jzdata.aimedical.secret.config;import lombok.extern.slf4j.Slf4j;import org.crazycake.shiro.IRedisManager;import org.crazycake.shiro.RedisClusterManager;import org.crazycake.shiro.RedisManager;import org.crazycake.shiro.RedisSentinelManager;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.util.ObjectUtils;import org.springframework.util.StringUtils;import redis.clients.jedis.JedisPoolConfig;import java.util.List;/** * redis自动配置类 * 默认优先使用ShiroRedisProperties的配置，如果此配置不存在， * 则去寻找spring-boot-starter-data-redis的redisProperties配置 * * @author caoqiang * @date 2020/1/14 0014下午 13:14 */@Slf4j@Configurationpublic class ShiroRedisAutoConfiguration {  @Configuration  @EnableConfigurationProperties({ShiroRedisProperties.class})  @ConditionalOnProperty(name = "security.shiro.redis.enabled")  public static class ShiroConfiguration {    @Autowired    private ShiroRedisProperties shiroRedisProperties;    /**     * 配置shiro redisManager     * 使用的是shiro-redis开源插件     *     * @return     */    @Bean    public IRedisManager redisManager() {      return createRedisManager();    }    private IRedisManager buildRedisManager() {      RedisManager redisManager = new RedisManager();      redisManager.setHost(shiroRedisProperties.getHost());      redisManager.setTimeout(shiroRedisProperties.getTimeout() * 1000);      if (!ObjectUtils.isEmpty(shiroRedisProperties.getPassword())) {        redisManager.setPassword(shiroRedisProperties.getPassword());      }      redisManager.setDatabase(shiroRedisProperties.getDatabase());      redisManager.setJedisPoolConfig(getJedisPoolConfig(shiroRedisProperties.getPool()));      return redisManager;    }    private IRedisManager buildRedisClusterManager() {      RedisClusterManager redisManager = new RedisClusterManager();      ShiroRedisProperties.Cluster clusterProperties = shiroRedisProperties.getCluster();      redisManager.setHost(hostAndPort(clusterProperties.getNodes()));      redisManager.setTimeout(shiroRedisProperties.getTimeout() * 1000);      if (!ObjectUtils.isEmpty(shiroRedisProperties.getPassword())) {        redisManager.setPassword(shiroRedisProperties.getPassword());      }      redisManager.setDatabase(shiroRedisProperties.getDatabase());      redisManager.setSoTimeout(shiroRedisProperties.getSoTimeout());      redisManager.setMaxAttempts(shiroRedisProperties.getMaxAttempts());      redisManager.setJedisPoolConfig(getJedisPoolConfig(shiroRedisProperties.getPool()));      return redisManager;    }    private IRedisManager buildRedisSentinelManager() {      RedisSentinelManager redisManager = new RedisSentinelManager();      ShiroRedisProperties.Sentinel sentinelProperties = shiroRedisProperties.getSentinel();      redisManager.setDatabase(shiroRedisProperties.getDatabase());      redisManager.setHost(sentinelProperties.getNodes());      if (!ObjectUtils.isEmpty(shiroRedisProperties.getPassword())) {        redisManager.setPassword(shiroRedisProperties.getPassword());      }      redisManager.setTimeout(shiroRedisProperties.getTimeout());      redisManager.setSoTimeout(shiroRedisProperties.getSoTimeout());      redisManager.setMasterName(sentinelProperties.getMaster());      redisManager.setJedisPoolConfig(getJedisPoolConfig(shiroRedisProperties.getPool()));      return redisManager;    }    private IRedisManager createRedisManager() {      if (!ObjectUtils.isEmpty(this.shiroRedisProperties.getCluster())) {        return buildRedisClusterManager();      }      if (!ObjectUtils.isEmpty(this.shiroRedisProperties.getSentinel())) {        return buildRedisSentinelManager();      }      return buildRedisManager();    }  }  private static String hostAndPort(List<String> nodes) {    return StringUtils.collectionToCommaDelimitedString(nodes);  }  private static JedisPoolConfig getJedisPoolConfig(ShiroRedisProperties.Pool props) {    return props != null ? jedisPoolConfig(props) : new JedisPoolConfig();  }  private static JedisPoolConfig jedisPoolConfig(ShiroRedisProperties.Pool props) {    JedisPoolConfig config = new JedisPoolConfig();    config.setMaxTotal(props.getMaxActive());    config.setMaxIdle(props.getMaxIdle());    config.setMinIdle(props.getMinIdle());    config.setMaxWaitMillis(props.getMaxWait());    return config;  }}