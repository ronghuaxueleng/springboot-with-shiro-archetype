package com.jzdata.aimedical.secret.config;import com.jzdata.aimedical.secret.consts.CommonConst;import com.jzdata.aimedical.secret.consts.DefaultFilterType;import com.jzdata.aimedical.secret.service.IUserService;import lombok.extern.slf4j.Slf4j;import org.apache.commons.lang3.StringUtils;import org.apache.shiro.authc.credential.HashedCredentialsMatcher;import org.apache.shiro.authz.Authorizer;import org.apache.shiro.authz.ModularRealmAuthorizer;import org.apache.shiro.authz.permission.PermissionResolver;import org.apache.shiro.authz.permission.WildcardPermissionResolver;import org.apache.shiro.cache.CacheManager;import org.apache.shiro.cache.MemoryConstrainedCacheManager;import org.apache.shiro.codec.Base64;import org.apache.shiro.mgt.SecurityManager;import org.apache.shiro.session.mgt.SessionManager;import org.apache.shiro.session.mgt.eis.SessionDAO;import org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor;import org.apache.shiro.spring.web.ShiroFilterFactoryBean;import org.apache.shiro.web.mgt.CookieRememberMeManager;import org.apache.shiro.web.mgt.DefaultWebSecurityManager;import org.apache.shiro.web.servlet.SimpleCookie;import org.apache.shiro.web.session.mgt.DefaultWebSessionManager;import org.crazycake.shiro.*;import org.crazycake.shiro.serializer.StringSerializer;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.boot.autoconfigure.AutoConfigureAfter;import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;import org.springframework.boot.context.properties.EnableConfigurationProperties;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import javax.servlet.Filter;import java.util.Collections;import java.util.LinkedHashMap;import java.util.List;import java.util.Map;/** * 自动配置类 * * @author caoqiang * @date 2020/1/14 0014下午 13:11 */@Slf4j@Configuration@AutoConfigureAfter(ShiroRedisAutoConfiguration.class)@EnableConfigurationProperties({ShiroProperties.class})@ConditionalOnProperty(prefix = "security.shiro", name = "enabled", havingValue = "true", matchIfMissing = true)public class ShiroAutoConfiguration {  @Autowired  private IUserService userService;  @Autowired  private ShiroProperties shiroProperties;  @Autowired  private ShiroRedisProperties shiroRedisProperties;  /**   * Shiro的Web过滤器Factory   */  @Bean  public ShiroFilterFactoryBean shiroFilterFactoryBean(SecurityManager securityManager) {    ShiroFilterFactoryBean shiroFilterFactoryBean = new ShiroFilterFactoryBean();    // 获取filters    Map<String, Filter> defaultFilters = shiroFilterFactoryBean.getFilters();    // 将配置文件中自定义的FormAuthenticationFilter注入shiroFilter中    ShiroProperties.ShiroFilter shiroFilter = shiroProperties.getShiroFilter();    Map<DefaultFilterType, Class<? extends Filter>> filters = shiroFilter.getFilters();    filters.forEach((filterName, filterClass) -> {      try {        Filter filter = filterClass.newInstance();        defaultFilters.put(filterName.getValue(), filter);      } catch (Exception e) {        log.warn("注册过滤器 [{}] 失败 - {}", filterName, e);      }    });    //Shiro的核心安全接口,这个属性是必须的    shiroFilterFactoryBean.setSecurityManager(securityManager);    Map<String, String> filterChainDefinitionMap = new LinkedHashMap<>();    //注入配置文件中配置的动态权限    List<Map<String, String>> perms = shiroProperties.getPerms();    perms.forEach(perm -> filterChainDefinitionMap.put(perm.get("url"), perm.get("permission")));    //注入数据库中配置的动态权限    List<Map<String, String>> dbPerms = userService.getPerms();    if (dbPerms != null) {      dbPerms.forEach(perm -> filterChainDefinitionMap.put(perm.get("url"), perm.get("permission")));    }    //注意过滤器配置顺序 不能颠倒    Map<DefaultFilterType, List<String>> filterPattern = shiroProperties.getFilterPattern();    filterPattern.forEach((filter, patterns) -> patterns.forEach(pattern -> {      filterChainDefinitionMap.put(pattern, filter.getValue());    }));    // 配置shiro默认登录界面地址，前后端分离中登录界面跳转应由前端路由控制，后台仅返回json数据    shiroFilterFactoryBean.setFilters(defaultFilters);    shiroFilterFactoryBean.setFilterChainDefinitionMap(filterChainDefinitionMap);    return shiroFilterFactoryBean;  }  /**   * 凭证匹配器   * （由于我们的密码校验交给Shiro的SimpleAuthenticationInfo进行处理了   * 所以我们需要修改下doGetAuthenticationInfo中的代码;   * ）   * 可以扩展凭证匹配器，实现 输入密码错误次数后锁定等功能，下一次   */  @Bean  @ConditionalOnMissingBean(HashedCredentialsMatcher.class)  public HashedCredentialsMatcher hashedCredentialsMatcher() {    HashedCredentialsMatcher hashedCredentialsMatcher = new HashedCredentialsMatcher();    /**     * 散列算法:MD2、MD5、SHA-1、SHA-256、SHA-384、SHA-512等。     */    hashedCredentialsMatcher.setHashAlgorithmName("md5");    /**     * 散列的次数，默认1次， 设置两次相当于 md5(md5(""));     */    hashedCredentialsMatcher.setHashIterations(1);    return hashedCredentialsMatcher;  }  @Bean  public SecurityManager securityManager() {    DefaultWebSecurityManager securityManager = new DefaultWebSecurityManager();    securityManager.setRealm(userRealm());    // 自定义的Session管理    securityManager.setSessionManager(sessionManager());    securityManager.setAuthorizer(authorizer());    if ((shiroRedisProperties.isEnabled() && StringUtils.isNotBlank(shiroRedisProperties.getHost()))            || (shiroRedisProperties.getCluster() != null            && shiroRedisProperties.getCluster().getNodes().size() > 0)) {      // 自定义的缓存实现      securityManager.setCacheManager(redisCacheManager());    }    securityManager.setRememberMeManager(rememberMeManager());    return securityManager;  }  /**   * cookie管理对象;记住我功能   *   * @return   */  public CookieRememberMeManager rememberMeManager() {    CookieRememberMeManager cookieRememberMeManager = new CookieRememberMeManager();    cookieRememberMeManager.setCookie(rememberMeCookie());    //rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度(128 256 512 位)    cookieRememberMeManager.setCipherKey(Base64.decode("1QWLxg+NYmxraMoxAXu/Iw=="));    return cookieRememberMeManager;  }  /**   * cookie对象;   *   * @return   */  public SimpleCookie rememberMeCookie() {    // 这个参数是cookie的名称，对应前端的checkbox的name = rememberMe    SimpleCookie simpleCookie = new SimpleCookie("rememberMe");    // 记住我cookie生效时间30天 ,单位秒。 注释掉，默认永久不过期    simpleCookie.setMaxAge(CommonConst.expire);    return simpleCookie;  }  @Bean  public Authorizer authorizer() {    ModularRealmAuthorizer modularRealmAuthorizer = new ModularRealmAuthorizer();    modularRealmAuthorizer.setPermissionResolver(permissionResolver());    modularRealmAuthorizer.setRealms(Collections.singletonList(userRealm()));    return modularRealmAuthorizer;  }  @Bean  public PermissionResolver permissionResolver() {    return new WildcardPermissionResolver();  }  /**   * Shiro Realm 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的   */  @Bean  public UserRealm userRealm() {    UserRealm userRealm = new UserRealm();    userRealm.setCredentialsMatcher(hashedCredentialsMatcher());    userRealm.setCachingEnabled(true);    return userRealm;  }  /**   * 自定义的SessionManager   *   * @return   */  @Bean  public SessionManager sessionManager() {    ShiroProperties.ShiroSession shiroSession = shiroProperties.getSession();    DefaultWebSessionManager sessionManager = new DefaultSessionManager();    // 设置SessionDao    if (shiroRedisProperties.isEnabled()) {      sessionManager.setSessionDAO(redisSessionDAO());    }    // 加入缓存管理器    sessionManager.setCacheManager(new MemoryConstrainedCacheManager());    if (shiroSession != null) {      // 设置全局session超时时间      sessionManager.setGlobalSessionTimeout(shiroSession.getGlobalSessionTimeout() * 60 * 1000);      // 删除过期的session      sessionManager.setDeleteInvalidSessions(shiroSession.getDeleteInvalidSessions());      // 是否定时检查session、      sessionManager.setSessionValidationSchedulerEnabled(shiroSession.getSessionValidationSchedulerEnabled());      // session是否可以被保存到cookie中      sessionManager.setSessionIdCookieEnabled(shiroSession.getSessionIdCookieEnabled());      // 是否去掉URL中的JSESSIONID      sessionManager.setSessionIdUrlRewritingEnabled(shiroSession.getSessionIdUrlRewritingEnabled());    }    return sessionManager;  }  /**   * cacheManager 缓存 redis实现   * 使用的是shiro-redis开源插件   *   * @return   */  @Bean  @ConditionalOnProperty(name = "security.shiro.redis.enabled")  public CacheManager redisCacheManager() {    RedisCacheManager redisCacheManager = new RedisCacheManager();    redisCacheManager.setRedisManager(redisManager());    redisCacheManager.setValueSerializer(new StringSerializer());    return redisCacheManager;  }  /**   * RedisSessionDAO shiro sessionDao层的实现 redis实现   * 使用的是shiro-redis开源插件   *   * @return   */  @Bean  @ConditionalOnProperty(name = "security.shiro.redis.enabled")  public SessionDAO redisSessionDAO() {    IRedisManager redisManager = redisManager();    RedisSessionDAO redisSessionDAO = new RedisSessionDAO();    redisSessionDAO.setRedisManager(redisManager);    redisSessionDAO.setKeyPrefix(shiroRedisProperties.getKeyPrefix()+":session:");    return redisSessionDAO;  }  /**   * 配置shiro redisManager   * <p>   * 使用的是shiro-redis开源插件   *   * @return   */  public IRedisManager redisManager() {    IRedisManager iRedisManager = null;    if (!StringUtils.isBlank(shiroRedisProperties.getHost())) {      iRedisManager = new RedisManager();      ((RedisManager) iRedisManager).setHost(shiroRedisProperties.getHostWithPort());      ((RedisManager) iRedisManager).setTimeout(shiroRedisProperties.getTimeout());      if (!StringUtils.isBlank(shiroRedisProperties.getPassword())) {        ((RedisManager) iRedisManager).setPassword(shiroRedisProperties.getPassword());      }    } else if (shiroRedisProperties.getCluster() != null && shiroRedisProperties.getCluster().getNodes().size() > 0) {      iRedisManager = new RedisClusterManager();      String clusterNodes = shiroRedisProperties.getCluster().getNodesString();      ((RedisClusterManager) iRedisManager).setHost(clusterNodes);    }    return iRedisManager;  }  /**   * 开启shiro aop注解支持   *   * @return   */  @Bean  @ConditionalOnProperty(name = "security.shiro.annotationEnabled", matchIfMissing = true)  public AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor() {    AuthorizationAttributeSourceAdvisor authorizationAttributeSourceAdvisor =            new AuthorizationAttributeSourceAdvisor();    authorizationAttributeSourceAdvisor.setSecurityManager(securityManager());    return authorizationAttributeSourceAdvisor;  }}